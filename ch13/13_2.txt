Solution 13.2-1

RIGHT-ROTATE(T,y)
x = y.left
y.left = x.right
if x.right != T.NIL
  x.right.p = y
x.p = y.p
if y.p == T.NIL
  T.root = x
else
  if y.p.right == y
    y.p.right = x
  else
    y.p.left = x
y.p = x
x. right = y

Solution 13.2-2

For every node at levels greater or equal to 1, a rotation is possible with it's parent node.
So, we are left with (n-1)C1 choices, as root node rotations are accounted in rotations of nodes of level 1.
(n-1)C1 = n-1
Hence Proved.

Solution 13.2-3

Depth of a increases.
Depth of b remains same.
Depth of c decreases.
    
Solution 13.2-4  
  
if each node having a left child is right rotated about the root node of child-sub-tree, in O(n-1) rotations, we get a BST with right going chain.
similar arguments can be given for a left going chain BST.
any intermideate stage can thus be achieved in a linear combination of these extreme states, hence proved.

Solution 13.2-5

A right-rotation makes the input node right child of the left subtree. Thus for a tree to be right convertible, from T1 to T2, 
the root node of T2 must be in the left flank of Tree T1, and recursively for each subsequent left and right subtrees.
T1 : 6,7,8,9
T2 : 9,8,6,7
Root of T2 is on right flank in T1, so T1 is not right-convertible.
now each right rotation involves one upward movement of the node.
So, root node in T2 can take atmost n-1 rotations in T1 to become root in T1'.(case of a left chained T1, to right chained T2)
similarly n-2,n-3 .. for subsequent nodes,
thus (n-1 + n - 2 + ...+ 1)
= n *(n-1) / 2
= O(n^2)
Hence Proved
